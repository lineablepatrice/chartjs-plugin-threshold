/*
 * @license
 * chartjs-plugin-threshold
 * http://abelheinsbroek.nl/
 * Version: 1.0.0
 *
 * Copyright 2020 Abel Heinsbroek
 * Released under the MIT license
 * https://github.com/abelheinsbroek/chartjs-plugin-threshold/blob/master/LICENSE.md
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("chart.js")):"function"==typeof define&&define.amd?define(["chart.js"],t):t(e.Chart)}(this,function(e){"use strict";(e=e&&e.hasOwnProperty("default")?e.default:e).plugins.register({afterInit:function(e){},destroy:function(e){},beforeDatasetsUpdate:function(e){if(!e.options.threshold)return!0;for(var t in e.data.datasets){var o=e.data.datasets[t],a=[];for(var r in o.data){var l=o.data[r].y,i=!1;for(var n in e.options.threshold){var u=e.options.threshold[n];if(this.evaluateRule(l,u)){a.push(u.color),i=!0;break}}i||a.push(o.backgroundColor)}o.borderColor=this.calculateGradient(e,o.backgroundColor[t]),o.pointBackgroundColor=a,o.pointBorderColor=a}return!0},evaluateRule:function(e,t){switch(t.mode){case"ge":return e>=t.value;case"gt":return e>t.value;case"lt":return e<t.value;case"le":return e<=t.value;default:return!1}},calculateGradient:function(e,t){for(var o=e.scales[e.getDatasetMeta(0).yAxisID],a=e.ctx.createLinearGradient(0,o.getPixelForValue(o.min),0,o.getPixelForValue(o.max)),r=o.getPixelForValue(o.min)-o.getPixelForValue(o.max),l=0,i=0,n=!1,u=e.options.threshold.slice(0).sort(function(e,t){return e.value-t.value}),d=0;d<u.length;d++){var s=u[d],c=(o.getPixelForValue(s.value)-o.getPixelForValue(o.max))/r;c<0&&(c=0),1<c&&(c=1),c=1-c,i=d<u.length-1?(1<(i=(o.getPixelForValue(u[d+1].value)-o.getPixelForValue(o.max))/r)&&(i=1),i<0&&(i=0),1-i):1,"l"==s.mode[0]&&(a.addColorStop(l,s.color),a.addColorStop(c,s.color),l=c),"g"!=s.mode[0]||n||(a.addColorStop(l,t),a.addColorStop(c,t),l=c,n=!0),"g"==s.mode[0]&&(a.addColorStop(l,s.color),a.addColorStop(i,s.color),l=i)}return n||(a.addColorStop(l,t),a.addColorStop(1,t)),a},beforeDraw:function(e){return!0},drawThresholdLine:function(e,t,o){var a=e.scales[e.getDatasetMeta(0).yAxisID],r=e.scales[e.getDatasetMeta(0).xAxisID];a.getPixelForValue(t)<a.getPixelForValue(a.max)||a.getPixelForValue(t)>a.getPixelForValue(a.min)||(e.ctx.beginPath(),e.ctx.moveTo(r.getPixelForValue(r.min),a.getPixelForValue(t)),e.ctx.lineWidth=1.5,e.ctx.strokeStyle=o,e.ctx.lineTo(r.getPixelForValue(r.max),a.getPixelForValue(t)),e.ctx.stroke())}})});